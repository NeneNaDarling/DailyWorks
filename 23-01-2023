First Unique Character in a String
-----------------------------------------
class Solution {
    public int firstUniqChar(String s) {
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(s.indexOf(c) == s.lastIndexOf(c)) {
                return i;
            }
        }
        
        return -1;
    }
}


Longest Substring Without Repeating Characters
-----------------------------------------------


class Solution {
    public int lengthOfLongestSubstring(String s) {
        int start=0;
        int end=0;
        int Len=0;
        HashSet<Character> substring=new HashSet<>();
        while(end<s.length()){
            if(!substring.contains(s.charAt(end))){
                substring.add(s.charAt(end));
                end++;
                Len=Math.max(substring.size(),Len);
            }
            else{
                substring.remove(s.charAt(start));
                start++;
            }
        }
        return Len;
    }
}




Longest Substring with At Least K Repeating Characters
----------------------------------------------------------------

code in java:-----

class Solution {
    public int longestSubstring(String s, int k) {
        return kchar(s.toCharArray(),0,s.length(),k);
    }
    int kchar(char[] ch,int start,int end,int k){
        if(end-start<k)
            return 0;
        int[] count=new int[26];
        for(int i=start;i<end;i++){
            count[ch[i]-'a']++;
        }
        for(int i=start;i<end;i++){
            if(count[ch[i]-'a']<k){
                int j=i+1;
                return Math.max(kchar(ch,start,i,k),kchar(ch,j,end,k));
            }
        }
        return end-start;
    }
}


